@model WebApp.Models.ArticleViewModel.CreateArticleViewModel

@{
    Layout = null;
    ViewData["Title"] = "Makale Yaz";
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MyBlog</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="~/css/create-page.css" rel="stylesheet">
</head>
<body>
    <!-- Sidebar Toggle Button -->
    <button class="sidebar-toggle" id="sidebarToggle">
        <i class="bi bi-list fs-4"></i>
    </button>

    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="p-4">
            <div class="d-flex align-items-center mb-4">
                <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                    <i class="bi bi-pencil-square text-white fs-4"></i>
                </div>
                <div class="ms-3">
                    <h5 class="mb-0 fw-bold">Makale Yaz</h5>
                    <small class="text-muted">Düşüncelerinizi paylaşın</small>
                </div>
            </div>
            
            <!-- Progress Indicator -->
            <div class="mb-4">
                <div class="d-flex justify-content-between mb-2">
                    <small class="text-muted">Tamamlanma</small>
                    <small class="text-muted" id="progressPercent">0%</small>
                </div>
                <div class="progress" style="height: 8px;">
                    <div class="progress-bar" id="progressBar" style="width: 0%"></div>
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="mb-4">
                <h6 class="fw-bold mb-3">Hızlı İşlemler</h6>
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="saveDraft()">
                        <i class="bi bi-save me-2"></i>Taslak Kaydet
                    </button>
                    <button type="button" class="btn btn-outline-info btn-sm" onclick="previewArticle()">
                        <i class="bi bi-eye me-2"></i>Önizle
                    </button>
                    <button type="button" class="btn btn-outline-warning btn-sm" onclick="clearForm()">
                        <i class="bi bi-trash me-2"></i>Formu Temizle
                    </button>
                </div>
            </div>
            
            <!-- Help Section -->
            <div class="bg-light rounded p-3">
                <h6 class="fw-bold mb-2">İpuçları</h6>
                <ul class="small text-muted mb-0">
                    <li>Başlık dikkat çekici olmalı</li>
                    <li>İçerik en az 100 karakter</li>
                    <li>Kategorileri doğru seçin</li>
                    <li>Düzenli olarak kaydedin</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="form-container">
            <!-- Header Section -->
            <div class="header-section">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="display-4 fw-bold mb-2">Yeni Makale Yaz</h1>
                        <p class="mb-0 opacity-75 fs-5">Düşüncelerinizi paylaşın ve topluluğa katkıda bulunun</p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <button type="button" class="btn btn-light" onclick="window.history.back()">
                            <i class="bi bi-arrow-left me-2"></i>Geri Dön
                        </button>
                    </div>
                </div>
            </div>

            <!-- Validation Errors -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        <strong>Formda hata var!</strong> Lütfen tüm alanları kontrol edin.
                    </div>
                </div>
            }

            @if (ViewBag.ValidationErrors != null && ((List<string>)ViewBag.ValidationErrors).Count > 0)
            {
                <div class="alert alert-danger">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        <strong>Doğrulama Hataları</strong>
                    </div>
                    <ul class="mb-0">
                        @foreach (var error in (List<string>)ViewBag.ValidationErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }

            <!-- Main Form -->
            <div class="form-card">
                <div class="card-body p-4">
                    <form asp-action="Create" method="post" id="createArticleForm">
                        @Html.AntiForgeryToken()
                        
                        <!-- Title -->
                        <div class="mb-4">
                            <label asp-for="Title" class="form-label fw-semibold">
                                <i class="bi bi-type-h1 me-1 text-primary"></i>Makale Başlığı
                            </label>
                            <input asp-for="Title" class="form-control form-control-lg" 
                                   placeholder="Etkileyici bir başlık yazın..." />
                            <span asp-validation-for="Title" class="text-danger small"></span>
                        </div>

                        <!-- Content -->
                        <div class="mb-4">
                            <label asp-for="Content" class="form-label fw-semibold">
                                <i class="bi bi-file-text me-1 text-primary"></i>Makale İçeriği
                            </label>
                            <div class="content-wrapper">
                                <textarea asp-for="Content" class="form-control" 
                                          rows="15" placeholder="Makalenizin içeriğini buraya yazın..."></textarea>
                                <div class="character-counter" id="charCounter">0 / 100</div>
                            </div>
                            <div class="form-text mt-2">
                                <i class="bi bi-info-circle me-1"></i>
                                En az 100 karakter olmalıdır. Markdown formatını destekler.
                            </div>
                            <span asp-validation-for="Content" class="text-danger small"></span>
                        </div>

                        <!-- Category Selection -->
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label asp-for="CategoryId" class="form-label fw-semibold">
                                    <i class="bi bi-folder me-1 text-primary"></i>Kategori
                                </label>
                                <select asp-for="CategoryId" asp-items="Model.Categories" 
                                        class="form-select" id="categorySelect">
                                    <option value="">Kategori Seçiniz</option>
                                </select>
                                <span asp-validation-for="CategoryId" class="text-danger small"></span>
                            </div>

                            <div class="col-md-4 mb-3">
                                <label asp-for="SubcategoryId" class="form-label fw-semibold">
                                    <i class="bi bi-folder2-open me-1 text-primary"></i>Alt Kategori
                                </label>
                                <select asp-for="SubcategoryId" asp-items="Model.Subcategories" 
                                        class="form-select" id="subcategorySelect" disabled>
                                    <option value="">Önce Kategori Seçiniz</option>
                                </select>
                                <span asp-validation-for="SubcategoryId" class="text-danger small"></span>
                            </div>

                            <div class="col-md-4 mb-3">
                                <label asp-for="TechnologyId" class="form-label fw-semibold">
                                    <i class="bi bi-code-slash me-1 text-primary"></i>Teknoloji
                                </label>
                                <select asp-for="TechnologyId" asp-items="Model.Technologies" 
                                        class="form-select" id="technologySelect" disabled>
                                    <option value="">Önce Alt Kategori Seçiniz</option>
                                </select>
                                <span asp-validation-for="TechnologyId" class="text-danger small"></span>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between align-items-center pt-4 border-top">
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-outline-secondary" onclick="saveDraft()">
                                    <i class="bi bi-save me-1"></i>Taslak Kaydet
                                </button>
                                <button type="button" class="btn btn-outline-info" onclick="previewArticle()">
                                    <i class="bi bi-eye me-1"></i>Önizle
                                </button>
                            </div>
                            <button type="submit" class="btn btn-primary btn-lg px-4">
                                <i class="bi bi-send me-2"></i>Makaleyi Yayınla
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Floating buttons removed -->

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Form validation enhancement
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('createArticleForm');
            const titleInput = document.querySelector('input[name="Title"]');
            const contentTextarea = document.querySelector('textarea[name="Content"]');
            const charCounter = document.getElementById('charCounter');
            const progressBar = document.getElementById('progressBar');
            const progressPercent = document.getElementById('progressPercent');
            
            // Character counter for content
            contentTextarea.addEventListener('input', function() {
                const charCount = this.value.length;
                const minChars = 100;
                
                charCounter.textContent = `${charCount} / ${minChars}`;
                
                if (charCount < minChars) {
                    this.classList.add('is-invalid');
                    charCounter.style.background = 'rgba(220, 53, 69, 0.8)';
                } else {
                    this.classList.remove('is-invalid');
                    charCounter.style.background = 'rgba(40, 167, 69, 0.8)';
                }
                
                updateProgress();
            });
            
            // Progress calculation
            function updateProgress() {
                const title = titleInput.value.trim();
                const content = contentTextarea.value.trim();
                const category = document.getElementById('categorySelect').value;
                const subcategory = document.getElementById('subcategorySelect').value;
                const technology = document.getElementById('technologySelect').value;
                
                let progress = 0;
                if (title) progress += 20;
                if (content.length >= 100) progress += 40;
                if (category) progress += 15;
                if (subcategory) progress += 15;
                if (technology) progress += 10;
                
                progressBar.style.width = progress + '%';
                progressPercent.textContent = progress + '%';
            }
            
            // Update progress on all inputs
            titleInput.addEventListener('input', updateProgress);
            document.getElementById('categorySelect').addEventListener('change', updateProgress);
            document.getElementById('subcategorySelect').addEventListener('change', updateProgress);
            document.getElementById('technologySelect').addEventListener('change', updateProgress);
            
            // Sidebar toggle
            document.getElementById('sidebarToggle').addEventListener('click', function() {
                document.getElementById('sidebar').classList.toggle('show');
            });
            
            // Auto-save draft functionality
            let autoSaveTimer;
            form.addEventListener('input', function() {
                clearTimeout(autoSaveTimer);
                autoSaveTimer = setTimeout(function() {
                    // TODO: Implement auto-save functionality
                    console.log('Auto-saving draft...');
                }, 3000);
            });
            
            // Dependent Dropdown Implementation
            initializeDependentDropdowns();
        });
        
        // Dependent Dropdown Manager
        function initializeDependentDropdowns() {
            const categorySelect = document.getElementById('categorySelect');
            const subcategorySelect = document.getElementById('subcategorySelect');
            const technologySelect = document.getElementById('technologySelect');
            
            if (categorySelect) {
                categorySelect.addEventListener('change', function() {
                    const categoryId = this.value;
                    console.log('Category changed:', categoryId);
                    
                    // Reset dependent dropdowns
                    resetSubcategorySelect();
                    resetTechnologySelect();
                    
                    if (categoryId) {
                        loadSubcategories(categoryId);
                    }
                });
            }
            
            if (subcategorySelect) {
                subcategorySelect.addEventListener('change', function() {
                    const subcategoryId = this.value;
                    console.log('Subcategory changed:', subcategoryId);
                    
                    // Reset technology dropdown
                    resetTechnologySelect();
                    
                    if (subcategoryId) {
                        loadTechnologies(subcategoryId);
                    }
                });
            }
        }
        
        // Load subcategories by category
        async function loadSubcategories(categoryId) {
            try {
                console.log('Loading subcategories for category:', categoryId);
                
                const subcategorySelect = document.getElementById('subcategorySelect');
                showSubcategoryLoading();
                
                const response = await fetch(`/Articles/subcategories/${categoryId}`);
                console.log('API Response status:', response.status);
                
                if (response.ok) {
                    const subcategories = await response.json();
                    console.log('Subcategories loaded:', subcategories);
                    
                    populateSubcategorySelect(subcategories);
                } else {
                    console.error('API Error:', response.status, response.statusText);
                    showSubcategoryError('Alt kategoriler yüklenemedi');
                }
            } catch (error) {
                console.error('Network Error:', error);
                showSubcategoryError('Bağlantı hatası');
            }
        }
        
        // Load technologies by subcategory
        async function loadTechnologies(subcategoryId) {
            try {
                console.log('Loading technologies for subcategory:', subcategoryId);
                
                const technologySelect = document.getElementById('technologySelect');
                showTechnologyLoading();
                
                const response = await fetch(`/Articles/technologies/${subcategoryId}`);
                console.log('API Response status:', response.status);
                
                if (response.ok) {
                    const technologies = await response.json();
                    console.log('Technologies loaded:', technologies);
                    
                    populateTechnologySelect(technologies);
                } else {
                    console.error('API Error:', response.status, response.statusText);
                    showTechnologyError('Teknolojiler yüklenemedi');
                }
            } catch (error) {
                console.error('Network Error:', error);
                showTechnologyError('Bağlantı hatası');
            }
        }
        
        // UI Helper Functions
        function showSubcategoryLoading() {
            const subcategorySelect = document.getElementById('subcategorySelect');
            subcategorySelect.innerHTML = '<option value="" disabled selected>Yükleniyor...</option>';
            subcategorySelect.disabled = true;
        }
        
        function showSubcategoryError(message) {
            const subcategorySelect = document.getElementById('subcategorySelect');
            subcategorySelect.innerHTML = `<option value="" disabled selected class="text-danger">❌ ${message}</option>`;
            subcategorySelect.disabled = true;
        }
        
        function populateSubcategorySelect(subcategories) {
            const subcategorySelect = document.getElementById('subcategorySelect');
            subcategorySelect.innerHTML = '<option value="">Alt Kategori Seçiniz</option>';
            
            subcategories.forEach(subcategory => {
                const option = document.createElement('option');
                option.value = subcategory.id;
                option.textContent = subcategory.name;
                subcategorySelect.appendChild(option);
            });
            
            subcategorySelect.disabled = false;
        }
        
        function resetSubcategorySelect() {
            const subcategorySelect = document.getElementById('subcategorySelect');
            subcategorySelect.innerHTML = '<option value="">Önce Kategori Seçiniz</option>';
            subcategorySelect.disabled = true;
        }
        
        function showTechnologyLoading() {
            const technologySelect = document.getElementById('technologySelect');
            technologySelect.innerHTML = '<option value="" disabled selected>Yükleniyor...</option>';
            technologySelect.disabled = true;
        }
        
        function showTechnologyError(message) {
            const technologySelect = document.getElementById('technologySelect');
            technologySelect.innerHTML = `<option value="" disabled selected class="text-danger">❌ ${message}</option>`;
            technologySelect.disabled = true;
        }
        
        function populateTechnologySelect(technologies) {
            const technologySelect = document.getElementById('technologySelect');
            technologySelect.innerHTML = '<option value="">Teknoloji Seçiniz</option>';
            
            technologies.forEach(technology => {
                const option = document.createElement('option');
                option.value = technology.id;
                option.textContent = technology.name;
                technologySelect.appendChild(option);
            });
            
            technologySelect.disabled = false;
        }
        
        function resetTechnologySelect() {
            const technologySelect = document.getElementById('technologySelect');
            technologySelect.innerHTML = '<option value="">Önce Alt Kategori Seçiniz</option>';
            technologySelect.disabled = true;
        }
        
        // Placeholder functions for future implementation
        function saveDraft() {
            alert('Taslak kaydetme özelliği yakında eklenecek!');
        }
        
        function previewArticle() {
            alert('Önizleme özelliği yakında eklenecek!');
        }
        
        function clearForm() {
            if (confirm('Formu temizlemek istediğinizden emin misiniz?')) {
                document.getElementById('createArticleForm').reset();
                resetSubcategorySelect();
                resetTechnologySelect();
                document.getElementById('charCounter').textContent = '0 / 100';
                document.getElementById('progressBar').style.width = '0%';
                document.getElementById('progressPercent').textContent = '0%';
            }
        }
    </script>
</body>
</html> 